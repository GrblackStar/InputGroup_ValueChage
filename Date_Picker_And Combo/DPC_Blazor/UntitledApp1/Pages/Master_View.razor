@page "/"
@page "/master_view"
@using Models.Northwind
@using Northwind
@using Financial
@using Models.Financial
@inject INorthwindService NorthwindService
@inject IFinancialService FinancialService

<div class="row-layout master-view-container">
    <!--<IgbDatePicker Label="Date" SelectedValueChanged="DatePickerSelectedValueChanged" class="date-picker" master_view-scope></IgbDatePicker>-->
    <!--<IgbCombo Outlined="true" Data="@_northwindCustomers" Label="Label/Placeholder" DisplayKey="CustomerID" SingleSelect="true" Change="SingleSelectComboChange" class="user-input" master_view-scope></IgbCombo>-->
    <!--<IgbInput Value="@(_dateVar.ToString())" Label="Label/Placeholder" Outlined="true" class="user-input" master_view-scope></IgbInput>-->

    <!-- DATE PICKER TWO WAY BINDING-->
    <IgbDatePicker Label="Date" @bind-Value="_dateVar" class="date-picker" master_view-scope></IgbDatePicker>
    <IgbDatePicker Label="Date" @bind-Value="_dateVar2" class="date-picker" master_view-scope></IgbDatePicker>
    @*<p class="typography__body-1 text">
        @_datevar
    </p>*@


    <!-- COMBO TWO WAY BINDIN3G-->
    <!--<IgbCombo Outlined="true" Data="@_northwindCustomers" @bind-Value="_customerObject" Label="Label/Placeholder" DisplayKey="CustomerID" SingleSelect="true" class="user-input" master_view-scope></IgbCombo>-->
    

    @*<IgbCombo Outlined="true" Data="@_northwindCustomers" Label="Label/Placeholder" Value="@(_value != null ? new object[]{_value} : default)" ValueKey="CustomerID" DisplayKey="CustomerID" SingleSelect="true" Change="@(e => _value = (string)e.Detail.NewValue.FirstOrDefault())" Change="SingleSelectComboChange" class="user-input" master_view-scope></IgbCombo>*@
    @* <IgbCombo Outlined="true" Data="@_northwindCustomers" Label="Label/Placeholder" Value="@(new object[]{_customerObject})" ValueKey="CustomerID" DisplayKey="CustomerID" SingleSelect="true" class="user-input" master_view-scope></IgbCombo> *@

    @* Bug 3: @bind- creates internal handler that only accepts object, i.e. can't bind to collection with specific type *@
    @* <IgbCombo Outlined="true" Data="@_northwindCustomers" @bind-Value="_customObjectAsSingleSelectArray" Label="Label/Placeholder" DisplayKey="CustomerID" SingleSelect="true" class="user-input" master_view-scope></IgbCombo>
    <IgbCombo Outlined="true" Data="@_northwindCustomers" @bind-Value="_customObjectAsSingleSelectArray" Label="Label/Placeholder" DisplayKey="CustomerID" SingleSelect="true" class="user-input" master_view-scope></IgbCombo> *@

   @*  <IgbCombo Outlined="true" Data="@_northwindCustomers" Value="_customObjectAsSingleSelectArray" Change="@((e) => _customObjectAsSingleSelectArray = e.Detail.NewValue)" Label="Label/Placeholder" DisplayKey="CustomerID" SingleSelect="true" class="user-input" master_view-scope></IgbCombo>
    <IgbCombo Outlined="true" Data="@_northwindCustomers" Value="_customObjectAsSingleSelectArray" Change="@((e) => _customObjectAsSingleSelectArray = e.Detail.NewValue)" Label="Label/Placeholder" DisplayKey="CustomerID" SingleSelect="true" class="user-input" master_view-scope></IgbCombo> *@

    @* Bug 2: Combo throws on null value (WC issue) default instead of new object[]{}; Repro: igc-combo.value = null. Might be fixed, need new Blazor build *@
    <IgbCombo Outlined="true" Data="@_northwindCustomers" Value="@(_customObjectAsSingleSelectArray.FirstOrDefault() != null ? new CustomersType[]{_customObjectAsSingleSelectArray.FirstOrDefault()} : new CustomersType[]{})" Change="@((e) => _customObjectAsSingleSelectArray = e.Detail.NewValue.Cast<CustomersType>().ToArray())" Label="Label/Placeholder" DisplayKey="CustomerID" SingleSelect="true" class="user-input" master_view-scope></IgbCombo>
    @* <IgbCombo Outlined="true" Data="@_northwindCustomers" Value="@(_customObjectAsSingleSelectArray.FirstOrDefault() != null ? new object[]{_customObjectAsSingleSelectArray.FirstOrDefault()} : new object[]{})" Change="@((e) => _customObjectAsSingleSelectArray = e.Detail.NewValue)" Label="Label/Placeholder" DisplayKey="CustomerID" SingleSelect="true" class="user-input" master_view-scope></IgbCombo> *@

    @* <IgbCombo Outlined="true" Data="@_northwindCustomers" Label="Label/Placeholder" DisplayKey="CustomerID" SingleSelect="true" Change="SingleSelectComboChange" class="user-input" master_view-scope></IgbCombo> *@

    @* <IgbCombo Outlined="true" Data="@_northwindCustomers" Label="Label/Placeholder" DisplayKey="CustomerID" SingleSelect="true" Change="SingleSelectComboChange" class="user-input" master_view-scope></IgbCombo>
    <IgbCombo Outlined="true" Data="@_northwindCustomers" Label="Label/Placeholder" DisplayKey="CustomerID" SingleSelect="true" Change="SingleSelectComboChange" class="user-input" master_view-scope></IgbCombo> *@
   
    @* <IgbInput @bind-Value="_customerObjectCustomerId" Label="Label/Placeholder" Outlined="true" class="user-input" master_view-scope></IgbInput> *@

    @System.Text.Json.JsonSerializer.Serialize(_customObjectAsSingleSelectArray)

    @* Bug 1: Setting new value array (other than empty) doesn't sync with client combo if it already has a value *@
    <button @onclick="@(() => _customObjectAsSingleSelectArray = new CustomersType[] { _northwindCustomers[5] })">set</button>
</div>

@code {
    private DateTime _dateVar
    {
        get => _test;
        set
        {
            _test = value;
        }
    }
    private DateTime _dateVar2
    {
        get => _test;
        set
        {
            _test = value;
        }
    }
    private DateTime _test;

    private string _value = "ALFKI";
    private string _stringVar;

    // private string _customerObjectCustomerId
    // {
    //     get
    //     {
    //         return _customerObject?.CustomerID.ToString() ?? default;
    //     }
    //     set
    //     {
    //         if (_northwindCustomerLookup.TryGetValue(value, out CustomersType customer))
    //         {
    //             _customObjectAsSingleSelectArray = new object[] { customer };
    //         }
    //     }
    // }

    // public object customerValue
    // {
    //     get
    //     {
    //         return _customerObject;
    //     }
    // }

    // private CustomersType _customerObject
    // {
    //     get => _customObjectAsSingleSelectArray.FirstOrDefault();
    //     set => _customObjectAsSingleSelectArray[0] = value;
    // }
    private CustomersType[] _customObjectAsSingleSelectArray = new CustomersType[0];


    private List<CustomersType> _northwindCustomers = new();
    private Dictionary<string, CustomersType> _northwindCustomerLookup = new();
    private List<BoxOfficeRevenueType> _financialBoxOfficeRevenue = new();

    public void DatePickerSelectedValueChanged(IgbSelectedValueChangedEventArgs e)
    {
        this._dateVar = (DateTime)e.NewValue;
    }

    protected override async Task OnInitializedAsync()
    {
        _northwindCustomers = await NorthwindService.GetCustomers();
        for (int i = 0; i < _northwindCustomers.Count; i++)
        {
            var customer = _northwindCustomers[i];
            _northwindCustomerLookup.Add(customer.CustomerID, customer);
        }

        _financialBoxOfficeRevenue = await FinancialService.GetBoxOfficeRevenue();
        await base.OnInitializedAsync();
    }
}
